diff -Nur c-ares-1.8.0/ares.h c-ares-1.8.0.patched/ares.h
--- c-ares-1.8.0/ares.h	2012-04-18 04:51:22.000000000 +0800
+++ c-ares-1.8.0.patched/ares.h	2012-05-23 10:42:02.000000000 +0800
@@ -387,6 +387,10 @@
                           fd_set *read_fds,
                           fd_set *write_fds);
 
+CARES_EXTERN int ares_fds_array(ares_channel channel,
+                          ares_socket_t **read_fds,
+                          ares_socket_t **write_fds);
+
 CARES_EXTERN int ares_getsock(ares_channel channel,
                               ares_socket_t *socks,
                               int numsocks);
diff -Nur c-ares-1.8.0/ares_fds.c c-ares-1.8.0.patched/ares_fds.c
--- c-ares-1.8.0/ares_fds.c	2011-05-27 22:16:55.000000000 +0800
+++ c-ares-1.8.0.patched/ares_fds.c	2012-05-23 10:42:37.000000000 +0800
@@ -57,7 +57,64 @@
            FD_SET(server->tcp_socket, write_fds);
          if (server->tcp_socket >= nfds)
            nfds = server->tcp_socket + 1;
-	}
+       }
     }
   return (int)nfds;
 }
+
+int ares_fds_array(ares_channel channel, ares_socket_t **read_fds, ares_socket_t **write_fds)
+{
+  struct server_state *server;
+  int i;
+  int r_cnt = 0;
+  int w_cnt = 0;
+  int r_size = 128;
+  int w_size = 128;
+
+  *read_fds = (ares_socket_t *)malloc(r_size * sizeof(ares_socket_t));
+  *write_fds = (ares_socket_t *)malloc(w_size * sizeof(ares_socket_t));
+
+  /* Are there any active queries? */
+  int active_queries = !ares__is_list_empty(&(channel->all_queries));
+
+  for (i = 0; i < channel->nservers; i++)
+    {
+      server = &channel->servers[i];
+      /* We only need to register interest in UDP sockets if we have
+       * outstanding queries.
+       */
+      if (active_queries && server->udp_socket != ARES_SOCKET_BAD)
+      {
+        *(*read_fds + r_cnt++) = server->udp_socket;
+      }
+      /* We always register for TCP events, because we want to know
+       * when the other side closes the connection, so we don't waste
+       * time trying to use a broken connection.
+       */
+      if (server->tcp_socket != ARES_SOCKET_BAD)
+       {
+         *(*read_fds + r_cnt++) = server->tcp_socket;
+         if (server->qhead)
+         {
+           *(*write_fds + w_cnt++) = server->tcp_socket;
+         }
+       }
+      if (r_cnt >= r_size - 2)
+        {
+          r_size *= 2;
+          *read_fds = (ares_socket_t *)realloc(*read_fds, r_size * sizeof(ares_socket_t));
+        }
+
+      if (w_cnt >= w_size - 2)
+        {
+          w_size *= 2;
+          *write_fds = (ares_socket_t *)realloc(*write_fds, w_size * sizeof(ares_socket_t));
+        }
+
+    }
+
+  *(*read_fds + r_cnt) = ARES_SOCKET_BAD;
+  *(*write_fds + w_cnt) = ARES_SOCKET_BAD;
+
+  return r_cnt + w_cnt;
+}
