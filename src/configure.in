#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([1.68])
AC_INIT([libgko.a], [3.14], [blog.optool.net])
AC_CONFIG_SRCDIR([config.h.in])
AM_CONFIG_HEADER([config.h])
#AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE([libgko.a],3.14)

##########################################################################
# debug compilation support
##########################################################################

AC_MSG_CHECKING([whether to build with debug information])
AC_ARG_ENABLE([debug],
    [AS_HELP_STRING([--enable-debug],
        [enable debug data generation (def=no)])],
    [debugit="$enableval"],
    [debugit=no])
AC_MSG_RESULT([$debugit])

if test x"$debugit" = x"yes"; then
    AC_DEFINE([GKO_DEBUG],[],[Debug Mode])
    AM_CXXFLAGS="-ggdb -Wall -O0"
    CXXFLAGS="-ggdb -Wall -O0"
else
    AC_DEFINE([NGKO_DEBUG],[],[No-debug Mode])
    AM_CXXFLAGS="-ggdb -Wall -O2 -march=nocona"
    CXXFLAGS="-ggdb -Wall -O2 -march=nocona"
fi

AC_SUBST([AM_CXXFLAGS])
##########################################################################

##########################################################################
# unittest compilation support
##########################################################################

AC_MSG_CHECKING([whether to build unittest version])
AC_ARG_ENABLE([unittest],
    [AS_HELP_STRING([--enable-unittest],
        [enable unittest code generation (def=no)])],
    [unittestit="$enableval"],
    [unittestit=no])
AC_MSG_RESULT([$unittestit])

if test x"$unittestit" = x"yes"; then
    AC_DEFINE([UNITTEST],[],[Unittest Mode])
    AM_CXXFLAGS="-ggdb -Wall"
    CXXFLAGS="-ggdb -Wall"
else
    AC_DEFINE([NUNITTEST],[],[No-unittest Mode])
    AM_CXXFLAGS="$AM_CXXFLAGS"
fi

AC_SUBST([AM_CXXFLAGS])
##########################################################################

##########################################################################
# profile compilation support
##########################################################################

AC_MSG_CHECKING([whether to build with profile information])
AC_ARG_ENABLE([profile],
    [AS_HELP_STRING([--enable-profile],
        [enable profile code generation (def=no)])],
    [profileit="$enableval"],
    [profileit=no])
AC_MSG_RESULT([$profileit])

if test x"$profileit" = x"yes"; then
    AC_DEFINE([PROFILE],[],[Profile Mode])
    AM_CXXFLAGS="-ggdb -Wall -lprofiler"
else
    AC_DEFINE([NPROFILE],[],[No-profile Mode])
    AM_CXXFLAGS="$AM_CXXFLAGS"
fi

AC_SUBST([AM_CXXFLAGS])
##########################################################################

##########################################################################
# gprofile compilation support
##########################################################################

AC_MSG_CHECKING([whether to build with gprofile information])
AC_ARG_ENABLE([gprofile],
    [AS_HELP_STRING([--enable-gprofile],
        [enable gprofile code generation (def=no)])],
    [gprofileit="$enableval"],
    [gprofileit=no])
AC_MSG_RESULT([$gprofileit])

if test x"$gprofileit" = x"yes"; then
    AC_DEFINE([GPROFILE],[],[Profile Mode])
    AM_CXXFLAGS="-ggdb -Wall -pg"
else
    AC_DEFINE([NGPROFILE],[],[No-gprofile Mode])
    AM_CXXFLAGS="$AM_CXXFLAGS"
fi

AC_SUBST([AM_CXXFLAGS])
##########################################################################

##########################################################################
# O3 optimize compilation support
##########################################################################

AC_MSG_CHECKING([whether to build with O3 optimization])
AC_ARG_ENABLE([o3],
    [AS_HELP_STRING([--enable-o3],
        [enable O3 code generation (def=no)])],
    [o3it="$enableval"],
    [o3it=no])
AC_MSG_RESULT([$o3it])

if test x"$o3it" = x"yes"; then
    AC_DEFINE([O3],[],[O3 Mode])
    AM_CXXFLAGS="-ggdb -Wall -O3 -march=nocona"
    CXXFLAGS="-ggdb -Wall -O3 -march=nocona"
else
    AC_DEFINE([NO3],[],[No-O3 Mode])
    AM_CXXFLAGS="$AM_CXXFLAGS"
fi

AC_SUBST([AM_CXXFLAGS])
##########################################################################

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_MAKE_SET

# Checks for libraries.
AC_SEARCH_LIBS([pthread_rwlock_init], [pthread])
AC_SEARCH_LIBS([clock_gettime], [rt]) # macos do not hava librt?
AC_PROG_RANLIB

# Checks for header files.
AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h stdlib.h string.h sys/socket.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_MODE_T
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_FORK
AC_CHECK_FUNCS([gethostbyname memset select socket strerror gettimeofday inet_ntoa poll])

###########################################################################
## Use jemalloc on Linux
###########################################################################
#JEMALLOC_SUBDIR=
#JEMALLOC_LDADD=
#AC_ARG_WITH([jemalloc],
#            [AS_HELP_STRING([--with-jemalloc],
#              [use jemalloc memory allocator.  Default is yes on Linux,  no elsewhere])],
#            [],
#            [with_jemalloc=check])
#
#case $target in
#    *-*-linux*)
#        if test "x$with_jemalloc" != xno; then
#            AC_CHECK_LIB([jemalloc], [malloc_conf],
#                  [JEMALLOC_LDADD=" -Wl,-ljemalloc"],
#                  [AC_MSG_NOTICE([No system jemalloc found, using bundled version])
#                   JEMALLOC_SUBDIR=libjemalloc
#                   JEMALLOC_LDADD=" -Wl,`pwd`/../lib/libjemalloc/libjemalloc_mt.a"])
#	fi
#	;;
#esac
#venderlibsinc=${JEMALLOC_LDADD}" "${venderlibsinc}
#AC_SUBST(JEMALLOC_SUBDIR)
#AC_SUBST(JEMALLOC_LDADD)
###########################################################################

##########################################################################
# check if libev exist
##########################################################################
libev="yes"
libevprefix="`pwd`/../lib/libev"
AC_ARG_WITH(libev,[  --with-libev            Compile with given libev library.],[libevprefix=$withval libev="yes"],[])
# if there is no value given, it appears that libevprefix is set to "yes"
if test $libev = 'yes'; then
        libevincs=" -I"${libevprefix}"/include"
        venderlibsinc=${venderlibsinc}" -Wl,-L"${libevprefix}"/lib -Wl,-lev"
        venderincs=${venderincs}" "${libevincs}
    AC_CHECK_HEADERS([${libevprefix}/include/event.h],,[AC_MSG_ERROR([Cannot find event.h, We NEED libev or libevent])])
else
	AC_CHECK_HEADERS([event.h],,[AC_MSG_ERROR([Cannot find event.h])])
fi
##########################################################################

##########################################################################
# check if c-ares exist
##########################################################################
libcares="yes"
libcaresprefix="`pwd`/../lib/c-ares"
AC_ARG_WITH(libcares,[  --with-libcares         Compile with given libcares library for thread safe and async DNS. BETTER NOT],[libcaresprefix=$withval libcares="yes"],[])
# if there is no value given, it appears that libcaresprefix is set to "yes"
if test $libcares = 'yes'; then
        libcaresincs=" -I"${libcaresprefix}"/include"
        venderlibsinc=${venderlibsinc}" -Wl,-L"${libcaresprefix}"/lib -Wl,-lcares"
        venderincs=${venderincs}" "${libcaresincs}
    AC_CHECK_HEADERS([${libcaresprefix}/include/ares.h],,[AC_MSG_ERROR([Cannot find ares.h, We NEED libcares for async DNS])])
else
    AC_CHECK_HEADERS([ares.h],,[AC_MSG_ERROR([Cannot find ares.h])])
fi

AC_SEARCH_LIBS([clock_gettime], [rt], [venderlibsinc=${venderlibsinc}" -Wl,-lrt"])
##########################################################################

AC_SUBST(venderlibsinc)
AC_SUBST(venderincs)

AM_CXXFLAGS=${libevincs}" "${libcaresincs}" "${AM_CXXFLAGS}
#AC_CONFIG_SUBDIRS([hash])
#AC_CONFIG_FILES([Makefile hash/Makefile])
AC_CONFIG_FILES([Makefile libgko.pc])
AC_OUTPUT
